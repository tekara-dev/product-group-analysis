///<reference path="listTable.js" />
///<reference path="../lib/api.js" />

const supplierDataRowIndex = 2;
const emptyCategorySymbol = "‚Ü¥";
const analyzedSymbol = "üî¨";
const groupedPropNameSeparator = "|";
const maxCharsInPropName = 15;
const oneCharWidth = 9;

const testRunAnalyze = () => {
  const res = runAnalyze(true);
  console.log(res);
};

const getSuppliers = () => {
  const meta = getCsApiPoint(
    `/v1/companies/meta?types=supplier&include=contacts`
  );
  let companies = getCsApiPoint(
    `/v1/companies?offset=0&limit=${Number(
      meta.total || 10000
    )}&types=supplier&include=contacts&search=`
  );
  return companies;
};

const postAnalyze = (data, makerId, modelId, supplierId, source) => {
  var sourceStrings = [];

  if (source.sourceRussian) sourceStrings.push("RussiaLocated");
  if (source.sourceForeign) sourceStrings.push("ChinaLocated");
  if (source.sourceShadow) sourceStrings.push("ShadowOffer");

  var sourceQuery = `&source=${sourceStrings.join("&source=")}`;

  const url = `/priceAnalyzer/analyzeFromComparisonTree?makerId=${makerId}&modelId=${modelId}&supplierId=${supplierId}${sourceQuery}`;
  console.log("url:", url);
  console.log("data:", JSON.stringify(data));

  try {
    return { result: getOffersApiPoint(url, "post", data), url, data };
  } catch (e) {
    return { result: [], url, data, error: e };
  }
};

const getSupplierIdStoreKey = (sheetName) => `${sheetName}_supplierId`;
const storeSupplierId = (id) => {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet()
    .getActiveSheet()
    .getName();

  setDocProps(getSupplierIdStoreKey(sheetName), id);
};

const getStoredSupplierId = () => {
  const sheetName = SpreadsheetApp.getActiveSpreadsheet()
    .getActiveSheet()
    .getName();

  return getDocProps(getSupplierIdStoreKey(sheetName)) || "";
};
/**
 * Validate the tree structure
 * @param {Array} tree - The tree structure to validate. Result of getActiveTable() function.
 * @returns {Array} - An array of errors
 */
const validateTree = (tree) => {
  const errors = [];

  const validateNode = ({
    type,
    partNumber,
    rowIndex,
    name,
    props = [],
    subs,
  }) => {
    if (type === "Part") {
      if (!partNumber) {
        errors.push({
          rowIndex,
          error: "Part number –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω",
          name,
        });
      }
      const priceProp = props.find(({ name }) => name === "–¶–µ–Ω–∞");
      if (!priceProp || !priceProp.value) {
        errors.push({ rowIndex, name, error: "–¶–µ–Ω–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      }

      const currencyProp = props.find(({ name }) => name === "–í–∞–ª—é—Ç–∞");
      if (!currencyProp || !currencyProp.value) {
        errors.push({ rowIndex, name, error: "–í–∞–ª—é—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" });
      }

      const weightProp = props.find(({ name }) => name === "–í–µ—Å (–≥.)");
      if (!weightProp || !weightProp.value) {
        errors.push({ rowIndex, name, error: "–í–µ—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω" });
      }
    }

    if (subs) {
      for (const subNode of subs) {
        validateNode(subNode);
      }
    }
  };

  for (const node of tree) {
    validateNode(node);
  }

  return errors;
};

/**
 * Exclude errors from the tree
 * @param {Array} tree - The tree structure to exclude errors from. Result of getActiveTable() function.
 * @param {Array} errors - The errors to exclude from the tree. Result of validateTree() function.
 * @returns {Array} - A new tree structure with errors excluded
 */
const excludeErrors = (tree, errors) => {
  const newTree = [];
  for (const node of tree) {
    if (errors.some(({ rowIndex }) => rowIndex === node.rowIndex)) continue;
    newTree.push(node);
    if (node.subs) {
      node.subs = excludeErrors(node.subs, errors);
    }
  }
  return newTree;
};

/**
 * Run the analyze. Runs on "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" button click.
 * @param {boolean} noErrors - Whether to exclude errors from the tree
 * @returns {Promise} - A promise that resolves to the result of the analyze
 */
const runAnalyze = async (noErrors = false) => {
  const treeData = getActiveTable(true);
  setTablePrice(treeData);

  const req = {
    settings: getCustomParams(),
    rows: treeData,
  };

  const { makerId, modelId } = getStoredSheetSettings();
  const supplierId = getStoredSupplierId();
  const errors = validateTree(treeData);

  if (!noErrors) {
    if (errors.length > 0) {
      return { error: "–ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ", errors };
    }
  } else {
    req.rows = excludeErrors(treeData, errors);
  }

  const source = getDocProps("analyzeSourceSettings") || {};

  //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑
  const { result: res, url, data: requestData, error } = await postAnalyze(req, makerId, modelId, supplierId, source);
  if (error) {
    return { error: error, url, requestData };
  }
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const { start: headerRowIndex } = getTableInfoData(sheet.getName());

  //–≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
  const maxRowIndex = getMaxRowIndex(req.rows);
  const rowsCount = maxRowIndex;
  const colsCount = 50;

  //–≠—Ç–æ –ø—É—Å—Ç–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–∏—à—É—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫. –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ª–∏—Å—Ç.
  const arrToFill = Array.from({ length: rowsCount }, () =>
    Array.from({ length: colsCount }, () => "")
  );

  //–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  cleanAnalyzedProps(
    getHeaderRows(sheet, headerRowIndex),
    sheet
  );

  //–ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
  if (res.supplier) {
    fillRowProps(
      res.supplier,
      headerRowIndex,
      sheet,
      supplierDataRowIndex,
      arrToFill
    );
  }

  //–ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –∏–º–µ–Ω–∞ –Ω–∞ –∏–º–µ–Ω–∞ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
  const rows = prepareAnalyzedProps(res.rows, res.supplier.props);
  //–ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
  fillAnalyzedProps(req.rows, rows, headerRowIndex, sheet, arrToFill);

  const startFrom = cutArrayToFill(arrToFill, headerRowIndex);
  if (arrToFill.length > 0) {
    sheet
      .getRange(1, startFrom + 1, arrToFill.length, arrToFill[0].length)
      .setValues(arrToFill);
  }

  mergeAndFixCats(sheet, headerRowIndex);

  //–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  return { res, req, arrToFill, makerId, modelId, supplierId, url, requestData };
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –¥–µ—Ä–µ–≤–µ
 * @param {{rowIndex: number, subs: {rowIndex: number}[]}[]} rows
 * @returns {number}
 */
const getMaxRowIndex = (rows) => {
  return rows.reduce((max, row) => {
    const maxIndex = Math.max(max, row.rowIndex || 0);
    if (row.subs) {
      const subsMaxIndex = getMaxRowIndex(row.subs);
      return Math.max(maxIndex, subsMaxIndex);
    }
    return maxIndex;
  }, 0);
};

/**
 * –û–±—Ä–µ–∑–∞–µ—Ç –º–∞—Å—Å–∏–≤ arrToFill –ø–æ –ø—É—Å—Ç—ã–º –∫–æ–ª–æ–Ω–∫–∞–º –≤ —Å—Ç—Ä–æ–∫–µ headerRowIndex
 * @param {number[][]} arrToFill - –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @returns {number} - –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–π –Ω–µ –ø—É—Å—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
 */
const cutArrayToFill = (arrToFill, headerRowIndex) => {
  const header = arrToFill[headerRowIndex];
  const start = header.findIndex((x) => x !== "");
  let end = 0;
  for (let i = start; i < header.length; i++) {
    if (header[i] === "") {
      end = i;
      break;
    }
  }
  for (let i = 0; i < arrToFill.length; i++) {
    arrToFill[i] = arrToFill[i].slice(start, end);
  }
  return start;
};

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∑–∞–ø–æ–ª–µ–Ω–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {{props: {name: string, value: string}[]}[]} data - –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
 * @param {{name: string, value: string}[]}[]} suppliesProps - –°–≤–æ–π—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
 * @returns {{props: {name: string, value: string}[]}[]} - –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const prepareAnalyzedProps = (data, suppliesProps = []) => {
  return data.map((row) => {
    return {
      ...row,
      props: row.props.map((prop) => {
        const groupedName = `${prop.name}${groupedPropNameSeparator}–∑–Ω–∞—á–µ–Ω–∏–µ`;
        if (suppliesProps.some((x) => x.name === groupedName)) {
          return {
            ...prop,
            name: groupedName,
          };
        }
        return prop;
      }),
      ...(row.subs
        ? { subs: prepareAnalyzedProps(row.subs, suppliesProps) }
        : {}),
    };
  });
};

const fillAnalyzedProps = (
  data,
  analyzed,
  headerRowIndex,
  sheet,
  arrToFill
) => {
  for (const row of data) {
    const { rowIndex, name, subs } = row;
    const analyzedRow = analyzed.find((x) => name === x.name);
    if (analyzedRow) {
      fillRowProps(analyzedRow, headerRowIndex, sheet, rowIndex, arrToFill);
      if (analyzedRow.subs && subs) {
        fillAnalyzedProps(
          subs,
          analyzedRow.subs,
          headerRowIndex,
          sheet,
          arrToFill
        );
      }
    }
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @returns {Array} - [firstHeaderRow, secondHeaderRow] –î–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
const getHeaderRows = (sheet, headerRowIndex) => {
  return sheet
    .getRange(headerRowIndex, 1, 2, sheet.getLastColumn())
    .getValues();
};

/**
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –≤ —Å—Ç—Ä–æ–∫–µ
 * @param {{ props: { name: string, value: string }[], rowIndex: number }} row - –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} rowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
const fillRowProps = (
  { props },
  headerRowIndex,
  sheet,
  rowIndex,
  arrToFill
) => {
  //–ò–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  const firstHeaderRowIndex = headerRowIndex;
  const secondHeaderRowIndex = headerRowIndex + 1;

  //–ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–π—Å—Ç–≤, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
  if (!props || props.length === 0) return;

  for (let prop of props) {
    //–°—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    let firstHeaderRow = arrToFill[firstHeaderRowIndex - 1];
    let secondHeaderRow = arrToFill[secondHeaderRowIndex - 1];
    // let [firstHeaderRow, secondHeaderRow] = getHeaderRows(
    //   sheet,
    //   headerRowIndex
    // );

    //–ù–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ó–Ω–∞—á–µ–Ω–∏–µ1'] –∏–∑ '–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–ó–Ω–∞—á–µ–Ω–∏–µ1'
    const propNames = prop.name.split(groupedPropNameSeparator);
    if (propNames.length === 2) {
      const firstPropName = propNames[0];
      //–ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
      let catColIndex = headerIndex(firstHeaderRow, firstPropName);
      if (catColIndex === -1) {
        //–ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞
        catColIndex = sheet.getLastColumn();
        sheet.insertColumnAfter(catColIndex);
        sheet
          .getRange(firstHeaderRowIndex, catColIndex + 1)
          .setValue(firstPropName);
        //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        arrToFill[firstHeaderRowIndex - 1][catColIndex] = firstPropName;
        //–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        firstHeaderRow = arrToFill[firstHeaderRowIndex - 1];
        secondHeaderRow = arrToFill[secondHeaderRowIndex - 1];
      }
      const secondPropName = propNames[1]; //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      const secondPropNameCat = formCatName(secondPropName); //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –° —Å–∏–º–≤–æ–ª–æ–º üî¨

      let secondCatColIndex = catColIndex;
      let found = false;
      if (!found) {
        for (let i = secondCatColIndex; i < secondHeaderRow.length; i++) {
          let propNameCat = secondHeaderRow[i];
          //–ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –ø—É—Å—Ç–∞—è, —Ç–æ —Å—á–∏—Ç–∞–µ–º –µ–µ –Ω–∞–π–¥–µ–Ω–æ–π.
          if (!propNameCat) {
            found = true;
            secondCatColIndex = i;
            break;
          }
          //–ï—Å–ª–∏ –Ω–∞—à–ª–∏, —Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          if (propNameCat === secondPropNameCat) {
            secondCatColIndex = i;
            found = true;
            break;
          }
          //–ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—É—Å—Ç–æ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          if (firstHeaderRow[i] === "" && i !== secondCatColIndex) {
            break;
          }
        }
      }

      if (!found) {
        sheet.insertColumnAfter(secondCatColIndex + 1);
        secondCatColIndex++;
      }
      //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      sheet
        .getRange(secondHeaderRowIndex, secondCatColIndex + 1)
        .setValue(secondPropNameCat);
      //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      arrToFill[secondHeaderRowIndex - 1][secondCatColIndex] =
        secondPropNameCat;

      //–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
      //sheet.getRange(rowIndex, secondCatColIndex + 1).setValue(prop.value);
      //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      arrToFill[rowIndex - 1][secondCatColIndex] = prop.value;
    } else if (propNames.length === 1) {
      let propNameCat = formCatName(propNames[0]); //–≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞. –° —Å–∏–º–≤–æ–ª–æ–º üî¨

      //–í–∞–∂–Ω–æ. –ü–æ–∏—Å–∫ –ø–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞.
      //–ë–µ—Ä–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
      let propColIndex = headerIndex(secondHeaderRow, propNameCat);

      if (propColIndex === -1) {
        propColIndex = sheet.getLastColumn();
        sheet.insertColumnAfter(propColIndex);
        sheet
          .getRange(secondHeaderRowIndex, propColIndex + 1)
          .setValue(propNameCat);
        //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        arrToFill[secondHeaderRowIndex - 1][propColIndex] = propNameCat;
        sheet
          .getRange(firstHeaderRowIndex, propColIndex + 1)
          .setValue(emptyCategorySymbol);
        //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        arrToFill[firstHeaderRowIndex - 1][propColIndex] = emptyCategorySymbol;
      }
      //sheet.getRange(rowIndex, propColIndex + 1).setValue(prop.value);
      //–ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
      arrToFill[rowIndex - 1][propColIndex] = prop.value;
    }
  }
};

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ç —Å–∏–º–≤–æ–ª–∞ üî¨
 * @param {string} catName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ üî¨
 */
const clearCatName = (catName) => {
  return catName.replace(analyzedSymbol, "").trim();
};

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —Å–∏–º–≤–æ–ª–æ–º üî¨
 * @param {string} catName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
 * @returns {string} - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —Å–∏–º–≤–æ–ª–æ–º üî¨
 */
const formCatName = (catName) => {
  return `${catName} ${analyzedSymbol}`;
};
/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª üî¨ –≤ –∫–æ–Ω–µ—Ü –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞.
 * –ü–æ—Å–ª–µ —á–µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–≤–æ–π—Å—Ç–≤–∞.
 * –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥ –∏ –ø–æ–Ω—è–ª, —á—Ç–æ —Å–∞–º –µ–≥–æ —Å —Ç—Ä—É–¥–æ–º —á–∏—Ç–∞—é. –î–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. @aagronik
 * @param {Sheet} sheet - –õ–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
 * @param {number} headerRowIndex - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 */
const mergeAndFixCats = (sheet, headerRowIndex) => {
  const firstHeaderRowIndex = headerRowIndex;
  let [firstHeaderRow, secondHeaderRow] = getHeaderRows(
    sheet,
    firstHeaderRowIndex
  );

  let mergeStartIndex = 0;
  let mergeLength = 0;
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
  const toFix = [];
  for (let i = 0; i < firstHeaderRow.length; i++) {
    const catName = clearCatName(firstHeaderRow[i]);
    // –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if (catName) {
      if (mergeLength > 0 && mergeStartIndex > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        sheet
          .getRange(
            firstHeaderRowIndex,
            mergeStartIndex + 1,
            1,
            mergeLength + 1
          )
          .merge();
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–æ–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        toFix.push({ start: mergeStartIndex + 1, length: mergeLength + 1 });
      } else {
        // –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –ø—É—Å—Ç–∞. (emptyCategorySymbol), –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –∫–∞–∫ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É
        toFix.push({ start: mergeStartIndex + 1, length: 1 });
      }
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      mergeLength = 0;
      mergeStartIndex = i;
    } else {
      mergeLength++;
    }
    if (i === firstHeaderRow.length - 1) {
      if (mergeLength > 0) {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        sheet
          .getRange(
            firstHeaderRowIndex,
            mergeStartIndex + 1,
            1,
            mergeLength + 1
          )
          .merge();
      }
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã –¥–∏–∞–ø–æ–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      toFix.push({ start: mergeStartIndex + 1, length: mergeLength + 1 });
    }
  }

  [firstHeaderRow, secondHeaderRow] = getHeaderRows(sheet, firstHeaderRowIndex);

  const maxWidth = maxCharsInPropName * oneCharWidth;
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∏–∞–ø–æ–∑–æ–Ω–∞–º–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —à–∏—Ä–∏–Ω—ã
  for (const { start, length } of toFix) {
    const colWidth =
      length > 1 //–ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–æ–ª—å—à–µ 1, —Ç–æ –±–µ—Ä–µ–º —à–∏—Ä–∏–Ω—É –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        ? firstHeaderRow[start - 1].length * oneCharWidth
        : secondHeaderRow[start - 1].length * oneCharWidth; //–ü—Ä–∏–Ω–∏–º–∞–µ–º —à–∏—Ä–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∑–∞ 9px
    for (let i = start; i < start + length; i++) {
      sheet.setColumnWidth(
        i,
        Math.min(maxWidth, Math.round(colWidth / length))
      );
    }
  }

  //–ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–µ–∫—Å—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
  sheet
    .getRange(firstHeaderRowIndex + 1, 1, 1, sheet.getLastColumn())
    .setWrap(true);
  sheet.autoResizeRows(firstHeaderRowIndex + 1, 1);

  //–û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  for (let i = 0; i < sheet.getLastColumn(); i++) {
    const catCell = sheet.getRange(firstHeaderRowIndex, i + 1);
    const prop = catCell.getValue();
    if (prop.includes(emptyCategorySymbol)) {
      catCell.setValue("");
      sheet.getRange(firstHeaderRowIndex, i + 1, 2, 1).merge();
    }
  }
};

const cleanAnalyzedProps = (headerRows, sheet) => {
  let first = headerRows[0].findIndex((x) => x.includes(analyzedSymbol));
  let second = headerRows[1].findIndex((x) => x.includes(analyzedSymbol));
  const start = first !== -1 && second !== -1 ? Math.min(first, second) : first !== -1 ? first : second !== -1 ? second : -1;
  const end = sheet.getLastColumn();
  if (start !== -1) {
    sheet.deleteColumns(start + 1, end - start);
  }
};
